// File generated by CPPExt (Value)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _BRepGProp_Face_HeaderFile
#define _BRepGProp_Face_HeaderFile

#ifndef _BRepAdaptor_Surface_HeaderFile
#include <BRepAdaptor_Surface.hxx>
#endif
#ifndef _Geom2dAdaptor_Curve_HeaderFile
#include <Geom2dAdaptor_Curve.hxx>
#endif
#ifndef _Standard_Boolean_HeaderFile
#include <Standard_Boolean.hxx>
#endif
#ifndef _Standard_Integer_HeaderFile
#include <Standard_Integer.hxx>
#endif
#ifndef _Standard_Real_HeaderFile
#include <Standard_Real.hxx>
#endif
class TopoDS_Face;
class gp_Pnt;
class gp_Vec;
class TopoDS_Edge;
class gp_Pnt2d;
class gp_Vec2d;
class TColStd_Array1OfReal;


#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Standard_Macro_HeaderFile
#include <Standard_Macro.hxx>
#endif


class BRepGProp_Face  {

public:

    void* operator new(size_t,void* anAddress) 
      {
        return anAddress;
      }
    void* operator new(size_t size) 
      { 
        return Standard::Allocate(size); 
      }
    void  operator delete(void *anAddress) 
      { 
        if (anAddress) Standard::Free((Standard_Address&)anAddress); 
      }
 // Methods PUBLIC
 // 


Standard_EXPORT BRepGProp_Face();


Standard_EXPORT BRepGProp_Face(const TopoDS_Face& F);


Standard_EXPORT   void Load(const TopoDS_Face& F) ;


Standard_EXPORT   Standard_Integer UIntegrationOrder() const;


Standard_EXPORT   Standard_Integer VIntegrationOrder() const;


//!  These methods define the iterator on the arc of curves <br>
//!  which delimit the domain U-V of the Face and the <br>
//!  services required to evaluate these curves. <br>
//! <br>
Standard_EXPORT   void Bounds(Standard_Real& U1,Standard_Real& U2,Standard_Real& V1,Standard_Real& V2) const;

//! true if the face is not trimmed <br>
Standard_EXPORT   Standard_Boolean NaturalRestriction() const;


Standard_EXPORT   void Normal(const Standard_Real U,const Standard_Real V,gp_Pnt& P,gp_Vec& VNor) const;


Standard_EXPORT   void Load(const TopoDS_Edge& E) ;


Standard_EXPORT   Standard_Real FirstParameter() const;


Standard_EXPORT   Standard_Real LastParameter() const;


Standard_EXPORT   Standard_Integer IntegrationOrder() const;


Standard_EXPORT   gp_Pnt2d Value2d(const Standard_Real U) const;


Standard_EXPORT   void D12d(const Standard_Real U,gp_Pnt2d& P,gp_Vec2d& V1) const;


Standard_EXPORT   Standard_Integer SIntOrder(const Standard_Real Eps) const;


Standard_EXPORT   Standard_Integer SVIntSubs() const;


Standard_EXPORT   Standard_Integer SUIntSubs() const;


Standard_EXPORT   void UKnots(TColStd_Array1OfReal& Knots) const;


Standard_EXPORT   void VKnots(TColStd_Array1OfReal& Knots) const;


Standard_EXPORT   Standard_Integer LIntOrder(const Standard_Real Eps) const;


Standard_EXPORT   Standard_Integer LIntSubs() const;


Standard_EXPORT   void LKnots(TColStd_Array1OfReal& Knots) const;





protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //
BRepAdaptor_Surface mySurface;
Geom2dAdaptor_Curve myCurve;
Standard_Boolean mySReverse;


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
