// File generated by CPPExt (Transient)
//
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _MMgt_TShared_HeaderFile
#define _MMgt_TShared_HeaderFile

#ifndef _Standard_HeaderFile
#include <Standard.hxx>
#endif
#ifndef _Handle_MMgt_TShared_HeaderFile
#include <Handle_MMgt_TShared.hxx>
#endif

#ifndef _Standard_Transient_HeaderFile
#include <Standard_Transient.hxx>
#endif
class Standard_OutOfMemory;



//! The abstract class TShared is the root class of <br>
//! managed objects. TShared objects are managed <br>
//! by a memory manager based on reference <br>
//! counting. They have handle semantics. In other <br>
//! words, the reference counter is transparently <br>
//! incremented and decremented according to the <br>
//! scope of handles. When all handles, which <br>
//! reference a single object are out of scope, the <br>
//! reference counter becomes null and the object is <br>
//! automatically deleted. The deallocated memory is <br>
//! not given back to the system though. It is <br>
//! reclaimed for new objects of the same size. <br>
//! Warning <br>
//! This memory management scheme does not <br>
//! work for cyclic data structures. In such cases <br>
//! (with back pointers for example), you should <br>
//! interrupt the cycle in a class by using a full C++ <br>
//! pointer instead of a handle. <br>
class MMgt_TShared : public Standard_Transient {

public:
 // Methods PUBLIC
 // 


Standard_EXPORT virtual  void Delete() const;
//Standard_EXPORT ~MMgt_TShared();




 // Type management
 //
 Standard_EXPORT const Handle(Standard_Type)& DynamicType() const;
 //Standard_EXPORT Standard_Boolean	       IsKind(const Handle(Standard_Type)&) const;

protected:

 // Methods PROTECTED
 // 


 // Fields PROTECTED
 //


private: 

 // Methods PRIVATE
 // 


 // Fields PRIVATE
 //


};





// other Inline functions and methods (like "C++: function call" methods)
//


#endif
