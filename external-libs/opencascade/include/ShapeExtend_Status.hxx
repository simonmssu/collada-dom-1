// File generated by CPPExt (Enum)
//
//                     Copyright (C) 1991 - 2000 by  
//                      Matra Datavision SA.  All rights reserved.
//  
//                     Copyright (C) 2001 - 2004 by
//                     Open CASCADE SA.  All rights reserved.
// 
// This file is part of the Open CASCADE Technology software.
//
// This software may be distributed and/or modified under the terms and
// conditions of the Open CASCADE Public License as defined by Open CASCADE SA
// and appearing in the file LICENSE included in the packaging of this file.
//  
// This software is distributed on an "AS IS" basis, without warranty of any
// kind, and Open CASCADE SA hereby disclaims all such warranties,
// including without limitation, any warranties of merchantability, fitness
// for a particular purpose or non-infringement. Please see the License for
// the specific terms and conditions governing rights and limitations under the
// License.

#ifndef _ShapeExtend_Status_HeaderFile
#define _ShapeExtend_Status_HeaderFile

//! This enumeration is used in <br>
//! ShapeHealing toolkit for representing flags in the <br>
//! return statuses of class methods. <br>
//! The status is a field of the class which is set by one or <br>
//! several methods of that class. <br>
//! It is used for reporting about errors and other situations <br>
//! encountered during execution of the method. <br>
//! There are defined 8 values for DONE and 8 for FAIL flags: <br>
//!      ShapeExtend_DONE1 ...      ShapeExtend_DONE8, <br>
//!      ShapeExtend_FAIL1 ...      ShapeExtend_FAIL8 <br>
//! and also enumerations for representing combinations of flags: <br>
//!      ShapeExtend_OK - no flags at all, <br>
//!      ShapeExtend_DONE - any of flags DONEi, <br>
//!      ShapeExtend_FAIL - any of flags FAILi. <br>
//! The class that uses statuses provides a method(s) which <br>
//! answers whether the flag corresponding to a given <br>
//! enumerative value is (are) set: <br>
//! Standard_Boolean Status(const ShapeExtend_Status test); <br>
//! Note that status can have several flags set simultaneously. <br>
//! Status(ShapeExtend_OK) gives True when no flags are set. <br>
//!  Nothing done, everything OK <br>
//!  Something was done, case 1 <br>
//!  Something was done, case 2 <br>
//!  Something was done, case 3 <br>
//!  Something was done, case 4 <br>
//!  Something was done, case 5 <br>
//!  Something was done, case 6 <br>
//!  Something was done, case 7 <br>
//!  Something was done, case 8 <br>
//!  Something was done (any of DONE#) <br>
//!  The method failed, case 1 <br>
//!  The method failed, case 2 <br>
//!  The method failed, case 3 <br>
//!  The method failed, case 4 <br>
//!  The method failed, case 5 <br>
//!  The method failed, case 6 <br>
//!  The method failed, case 7 <br>
//!  The method failed, case 8 <br>
enum ShapeExtend_Status { 
 ShapeExtend_OK,
ShapeExtend_DONE1,
ShapeExtend_DONE2,
ShapeExtend_DONE3,
ShapeExtend_DONE4,
ShapeExtend_DONE5,
ShapeExtend_DONE6,
ShapeExtend_DONE7,
ShapeExtend_DONE8,
ShapeExtend_DONE,
ShapeExtend_FAIL1,
ShapeExtend_FAIL2,
ShapeExtend_FAIL3,
ShapeExtend_FAIL4,
ShapeExtend_FAIL5,
ShapeExtend_FAIL6,
ShapeExtend_FAIL7,
ShapeExtend_FAIL8,
ShapeExtend_FAIL
};


#ifndef _Standard_PrimitiveTypes_HeaderFile
#include <Standard_PrimitiveTypes.hxx>
#endif

#endif
